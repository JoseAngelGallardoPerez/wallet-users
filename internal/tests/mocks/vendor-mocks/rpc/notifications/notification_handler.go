// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	notifications "github.com/Confialink/wallet-notifications/rpc/proto/notifications"
	mock "github.com/stretchr/testify/mock"
)

// NotificationHandler is an autogenerated mock type for the NotificationHandler type
type NotificationHandler struct {
	mock.Mock
}

// Dispatch provides a mock function with given fields: _a0, _a1
func (_m *NotificationHandler) Dispatch(_a0 context.Context, _a1 *notifications.Request) (*notifications.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *notifications.Response
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.Request) *notifications.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notifications.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *notifications.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSettings provides a mock function with given fields: _a0, _a1
func (_m *NotificationHandler) GetSettings(_a0 context.Context, _a1 *notifications.SettingsRequest) (*notifications.SettingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *notifications.SettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.SettingsRequest) *notifications.SettingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notifications.SettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *notifications.SettingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSettings provides a mock function with given fields: _a0, _a1
func (_m *NotificationHandler) GetUserSettings(_a0 context.Context, _a1 *notifications.UserSettingsRequest) (*notifications.UserSettingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *notifications.UserSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *notifications.UserSettingsRequest) *notifications.UserSettingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notifications.UserSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *notifications.UserSettingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
